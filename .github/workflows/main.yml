name: Deploy-Frontend

on:
  push:
    branches: [ master, staging, develop ]

jobs:
  build-prod:
    if: github.ref == 'refs/heads/master'
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Copy code files to container
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install npm dependencies
        run: npm install

      - name: Run generate static task
        run: npm run generate
        env:
          PROD: ${{ secrets.PROD }}

          BASE_URL: ${{ secrets.BASE_URL }}
          GMAPKEY: ${{ secrets.GMAPKEY }}
          SECRET_SUMSUB: ${{ secrets.SECRET_SUMSUB }}

          WORKNET_WUSD_TOKEN: ${{ secrets.WORKNET_WUSD_TOKEN }}
          WORKNET_WBNB_TOKEN: ${{ secrets.WORKNET_WBNB_TOKEN }}
          WORKNET_WETH_TOKEN: ${{ secrets.WORKNET_WETH_TOKEN }}
          WORKNET_USDT_TOKEN: ${{ secrets.WORKNET_USDT_TOKEN }}
          WORKNET_VOTING: ${{ secrets.WORKNET_VOTING }}

          WQ_PROVIDER: ${{ secrets.WQ_PROVIDER }}
          WQ_EXPLORER: ${{ secrets.WQ_EXPLORER }}

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@v2.1.4
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

  build-develop:
    if: github.ref == 'refs/heads/develop'
    environment: develop
    runs-on: ubuntu-latest

    steps:
      - name: Copy code files to container
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install npm dependencies
        run: npm install

      - name: Run generate static task
        run: npm run generate
        env:
          PROD: ${{ secrets.PROD }}

          BASE_URL: ${{ secrets.BASE_URL }}
          GMAPKEY: ${{ secrets.GMAPKEY }}
          SECRET_SUMSUB: ${{ secrets.SECRET_SUMSUB }}

          WORKNET_WUSD_TOKEN: ${{ secrets.WORKNET_WUSD_TOKEN }}
          WORKNET_WBNB_TOKEN: ${{ secrets.WORKNET_WBNB_TOKEN }}
          WORKNET_WETH_TOKEN: ${{ secrets.WORKNET_WETH_TOKEN }}
          WORKNET_USDT_TOKEN: ${{ secrets.WORKNET_USDT_TOKEN }}
          WORKNET_VOTING: ${{ secrets.WORKNET_VOTING }}

          WQ_PROVIDER: ${{ secrets.WQ_PROVIDER }}
          WQ_EXPLORER: ${{ secrets.WQ_EXPLORER }}

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@v2.1.4
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

  build-staging:
    if: github.ref == 'refs/heads/stage'
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Copy code files to container
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install npm dependencies
        run: npm install

      - name: Run generate static task
        run: npm run generate
        env:
          PROD: ${{ secrets.PROD }}

          BASE_URL: ${{ secrets.BASE_URL }}
          GMAPKEY: ${{ secrets.GMAPKEY }}
          SECRET_SUMSUB: ${{ secrets.SECRET_SUMSUB }}

          WORKNET_WUSD_TOKEN: ${{ secrets.WORKNET_WUSD_TOKEN }}
          WORKNET_WBNB_TOKEN: ${{ secrets.WORKNET_WBNB_TOKEN }}
          WORKNET_WETH_TOKEN: ${{ secrets.WORKNET_WETH_TOKEN }}
          WORKNET_USDT_TOKEN: ${{ secrets.WORKNET_USDT_TOKEN }}
          WORKNET_VOTING: ${{ secrets.WORKNET_VOTING }}

          WQ_PROVIDER: ${{ secrets.WQ_PROVIDER }}
          WQ_EXPLORER: ${{ secrets.WQ_EXPLORER }}

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@v2.1.4
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
